//
//  AddView.swift
//  TodoList
//
//  Created by ÏÑúÏõêÏßÄ on 2022/08/04.
//

import SwiftUI

struct AddView: View {
    @Environment(\.presentationMode) var presentationMode
    @EnvironmentObject var listViewModel: ListViewModel
    @State var textFieldText: String = ""
    
    @State var alertTile: String = ""
    @State var showAlert: Bool = false
    
    //MARK:  - Lifecycle
    var body: some View {
        GeometryReader { geometry in
            ScrollView {
                VStack {
                    TextField( "Ìï†ÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî ... " , text: $textFieldText)
                        .padding(.horizontal)
                        .frame(height: 55)
                        .background(Color(UIColor.secondarySystemBackground))
                        .cornerRadius(10)
                    Button(action :  saveButtonPressed, label: {
                        Text("Ï†ÄÏû•ÌïòÍ∏∞".uppercased())
                            .foregroundColor(.white)
                            .font(.headline)
                            .frame(height: geometry.size.height / 12 )
                            .frame(maxWidth: .infinity)
                            .background(ColorAsset.mainColor)
                            .cornerRadius(12)
                    })
                }
                .padding(14)
            }
            .navigationTitle("Ìï†Ïùº Ï∂îÍ∞ÄÌïòÍ∏∞ üñä")
            .alert(isPresented: $showAlert, content:  getAlert)
        }
    }
    
    //MARK:  - Ï†ÄÏû• Î≤ÑÌäºÏùÑ ÎàÑÎ•ºÎïå
    func saveButtonPressed() {
        if textIsAppropriate() == true {
            listViewModel.addItems(title: textFieldText)
            presentationMode.wrappedValue.dismiss()
        }
    }
    
    func textIsAppropriate() -> Bool {
        if textFieldText.count < 3 {
            alertTile = "Ïò§ÎäòÏùò Ìï†Ïùº Ï∂îÍ∞ÄÌïòÍ∏∞Î•º 3Í∏ÄÏûê Ïù¥ÏÉÅ Ïç®Ï£ºÏÑ∏Ïöî üò®üò∞üò± "
            showAlert.toggle()
            
            return false
        }
        return true
    }

    //MARK:  - ÏïåÎ¶ºÏ∞Ω
    func getAlert() -> Alert {
        let okayButton = Alert.Button.default(Text("ÌôïÏù∏"))
        let cancelButton = Alert.Button.destructive(Text("Ï∑®ÏÜå"))
        return Alert(title: Text(alertTile),
                     primaryButton: okayButton, secondaryButton: cancelButton)
    }
}

struct AddView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            AddView()
        }
        .environmentObject(ListViewModel())
    }
}
